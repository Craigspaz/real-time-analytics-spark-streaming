# ######################################################################################################################
# EMR Studio IAM Setup
# Version: 1.0
# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
# SPDX-License-Identifier: MIT-0
#
# Creates basic IAM configuration to deploy EMR Studio with IAM authentication. Two roles
# - EMR Studio Service Role
# - EMR Studio Admin Role
########################################################################################################################
AWSTemplateFormatVersion: 2010-09-09
Parameters:
  DeploymentName:
    Type: "String"
  S3BucketName:
    Type: "String"
  UserArn:
    Type: "String"
Resources:
  EMRStudioServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
                Service: elasticmapreduce.amazonaws.com
            Action: sts:AssumeRole
            Condition:
              StringEquals:
                aws:SourceAccount: !Ref "AWS::AccountId"
              ArnLike:
                aws:SourceArn:
                  !Join
                    - ':'
                    - - 'arn:aws:elasticmapreduce'
                      - !Ref "AWS::Region"
                      - !Ref "AWS::AccountId"
                      - '*'
      Description: This is the role that EMR Studio will use to access other services
      Policies:
        - PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Sid: AllowEMRReadOnlyActions
                Effect: Allow
                Action:
                  - elasticmapreduce:ListInstances
                  - elasticmapreduce:DescribeCluster
                  - elasticmapreduce:ListSteps
                Resource: "*"
              - Sid: AllowEC2ENIActionsWithEMRTags
                Effect: Allow
                Action:
                  - ec2:CreateNetworkInterfacePermission
                  - ec2:DeleteNetworkInterface
                Resource:
                  - "arn:aws:ec2:*:*:network-interface/*"
                Condition:
                  StringEquals:
                    aws:ResourceTag/for-use-with-amazon-emr-managed-policies: true
              - Sid: AllowEC2ENIAttributeAction
                Effect: Allow
                Action:
                  - ec2:ModifyNetworkInterfaceAttribute
                Resource:
                  - arn:aws:ec2:*:*:instance/*
                  - arn:aws:ec2:*:*:network-interface/*
                  - arn:aws:ec2:*:*:security-group/*
              - Sid: AllowEC2SecurityGroupActionsWithEMRTags
                Effect: Allow
                Action:
                  - ec2:AuthorizeSecurityGroupEgress
                  - ec2:AuthorizeSecurityGroupIngress
                  - ec2:RevokeSecurityGroupEgress
                  - ec2:RevokeSecurityGroupIngress
                  - ec2:DeleteNetworkInterfacePermission
                Resource: "*"
                Condition:
                  StringEquals:
                    aws:ResourceTag/for-use-with-amazon-emr-managed-policies: true
              - Sid: AllowDefaultEC2SecurityGroupsCreationWithEMRTags
                Effect: Allow
                Action:
                  - ec2:CreateSecurityGroup
                Resource: arn:aws:ec2:*:*:security-group/*
                Condition:
                  StringEquals:
                    aws:RequestTag/for-use-with-amazon-emr-managed-policies: true
              - Sid: AllowDefaultEC2SecurityGroupsCreationInVPCWithEMRTags
                Effect: Allow
                Action:
                  - ec2:CreateSecurityGroup
                Resource:
                  arn:aws:ec2:*:*:vpc/*
                Condition:
                  StringEquals:
                    aws:ResourceTag/for-use-with-amazon-emr-managed-policies: true
              - Sid: AllowAddingEMRTagsDuringDefaultSecurityGroupCreation
                Effect: Allow
                Action:
                  - ec2:CreateTags
                Resource: arn:aws:ec2:*:*:security-group/*
                Condition:
                  StringEquals:
                    aws:RequestTag/for-use-with-amazon-emr-managed-policies: true
                    ec2:CreateAction: CreateSecurityGroup
              - Sid: AllowEC2ENICreationWithEMRTags
                Effect: Allow
                Action:
                  - ec2:CreateNetworkInterface
                Resource:
                  arn:aws:ec2:*:*:network-interface/*
                Condition:
                  StringEquals:
                    aws:RequestTag/for-use-with-amazon-emr-managed-policies: true
              - Sid: AllowEC2ENICreationInSubnetAndSecurityGroupWithEMRTags
                Effect: Allow
                Action:
                  - ec2:CreateNetworkInterface
                Resource:
                  - arn:aws:ec2:*:*:subnet/*
                  - arn:aws:ec2:*:*:security-group/*
                Condition:
                  StringEquals:
                    aws:ResourceTag/for-use-with-amazon-emr-managed-policies: true
              - Sid: AllowAddingTagsDuringEC2ENICreation
                Effect: Allow
                Action:
                  ec2:CreateTags
                Resource: arn:aws:ec2:*:*:network-interface/*
                Condition:
                  StringEquals:
                    ec2:CreateAction: CreateNetworkInterface
              - Sid: AllowEC2ReadOnlyActions
                Effect: Allow
                Action:
                  - ec2:DescribeSecurityGroups
                  - ec2:DescribeNetworkInterfaces
                  - ec2:DescribeTags
                  - ec2:DescribeInstances
                  - ec2:DescribeSubnets
                  - ec2:DescribeVpcs
                Resource: "*"
              - Sid: AllowSecretsManagerReadOnlyActionsWithEMRTags
                Effect: Allow
                Action:
                  secretsmanager:GetSecretValue
                Resource: arn:aws:secretsmanager:*:*:secret:*
                Condition:
                  StringEquals:
                    aws:ResourceTag/for-use-with-amazon-emr-managed-policies: true
              - Sid: AllowActionsOnWorkspaceS3Bucket
                Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                  - s3:GetEncryptionConfiguration
                  - s3:ListBucket
                  - s3:DeleteObject
                Resource:
                  - !Sub arn:aws:s3:::${S3BucketName}
                  - !Sub arn:aws:s3:::${S3BucketName}/*
          PolicyName: !Sub ${DeploymentName}_EMRStudioServiceRolePolicy
      Tags:
        - Key: Environment
          Value: !Ref DeploymentName
  EMRStudioAdmin:
    # https://docs.aws.amazon.com/emr/latest/ManagementGuide/emr-studio-user-permissions.html
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: elasticmapreduce.amazonaws.com
              AWS: !Ref UserArn
            Action: sts:AssumeRole
      Description: This is the power user role for EMR Studio
      Policies:
        - PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Sid: AllowAddingTagsOnSecretsWithEMRStudioPrefix
                Effect: Allow
                Action: secretsmanager:TagResource
                Resource: arn:aws:secretsmanager:*:*:secret:emr-studio-*
              - Sid: AllowPassingServiceRoleForWorkspaceCreation
                Effect: Allow
                Action: iam:PassRole
                Resource:
                  - !GetAtt EMRStudioServiceRole.Arn
                  - !GetAtt EMRServiceRole.Arn
                  - !GetAtt EMREC2Role.Arn
              - Sid: EMRStudioAdmin
                Effect: Allow
                Action:
                  - elasticmapreduce:CreateEditor
                  - elasticmapreduce:DescribeEditor
                  - elasticmapreduce:ListEditors
                  - elasticmapreduce:StartEditor
                  - elasticmapreduce:StopEditor
                  - elasticmapreduce:DeleteEditor
                  - elasticmapreduce:OpenEditorInConsole
                  - elasticmapreduce:AttachEditor
                  - elasticmapreduce:DetachEditor
                  - elasticmapreduce:CreateRepository
                  - elasticmapreduce:DescribeRepository
                  - elasticmapreduce:DeleteRepository
                  - elasticmapreduce:ListRepositories
                  - elasticmapreduce:LinkRepository
                  - elasticmapreduce:UnlinkRepository
                  - elasticmapreduce:DescribeCluster
                  - elasticmapreduce:ListInstanceGroups
                  - elasticmapreduce:ListBootstrapActions
                  - elasticmapreduce:ListClusters
                  - elasticmapreduce:ListSteps
                  - elasticmapreduce:CreatePersistentAppUI
                  - elasticmapreduce:DescribePersistentAppUI
                  - elasticmapreduce:GetPersistentAppUIPresignedURL
                  - elasticmapreduce:GetOnClusterAppUIPresignedURL
                  - elasticmapreduce:UpdateEditor
                  - elasticmapreduce:PutWorkspaceAccess
                  - elasticmapreduce:DeleteWorkspaceAccess
                  - elasticmapreduce:ListWorkspaceAccessIdentities
                  - elasticmapreduce:RunJobFlow
                  - elasticmapreduce:ListStudios
                  - elasticmapreduce:CreateStudioPresignedUrl
                  - elasticmapreduce:DeleteStudio
                  - elasticmapreduce:ListStudioSessionMappings
                  - elasticmapreduce:DescribeStudio
                  - s3:ListAllMyBuckets
                  - s3:ListBucket
                  - s3:GetBucketLocation
                  - s3:GetObject
                  - s3:GetBucketLocation
                  - s3:GetBucketLocation
                  - s3:GetObject
                  - s3:ListBucket
                  - s3:ListBucketMultipartUploads
                  - s3:ListMultipartUploadParts
                  - s3:AbortMultipartUpload
                  - s3:PutObject
                  - s3:PutBucketPublicAccessBlock
                  - s3:ListAllMyBuckets
                  - secretsmanager:ListSecrets
                  - secretsmanager:CreateSecret
                  - secretsmanager:TagResource
                  - servicecatalog:DescribeProduct
                  - servicecatalog:DescribeProductView
                  - servicecatalog:DescribeProvisioningParameters
                  - servicecatalog:ProvisionProduct
                  - servicecatalog:SearchProducts
                  - servicecatalog:UpdateProvisionedProduct
                  - servicecatalog:ListProvisioningArtifacts
                  - servicecatalog:ListLaunchPaths
                  - servicecatalog:DescribeRecord
                  - cloudformation:DescribeStackResources
                  - lakeformation:GetDataAccess
                Resource: "*"
              - Sid: CodeWhispererPermissions
                Effect: Allow
                Action:
                  - codewhisperer:GenerateRecommendations
                Resource: "*"
          PolicyName: !Sub ${DeploymentName}_EMRStudioAdminPolicy
      Tags:
        - Key: Environment:q
          Value: !Ref DeploymentName
  # TODO: Create an EMRStudio Developer Role
  EMRServiceRole:
    Type: AWS::IAM::Role
    Properties:
      #RoleName: !Sub ${DeploymentName}-EMRServiceRole
      Description: "Role that will be used by EMR to access other services"
      AssumeRolePolicyDocument:
        Version: 2008-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: elasticmapreduce.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AmazonElasticMapReduceRole"
        - "arn:aws:iam::aws:policy/AmazonKinesisFullAccess"
        - "arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess"
  EMREC2Role:
    Type: AWS::IAM::Role
    Properties:
      #RoleName: !Sub ${DeploymentName}-EMREC2Role
      Description: "Role that will be used by EMR EC2 instances to access other services"
      AssumeRolePolicyDocument:
        Version: 2008-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AmazonElasticMapReduceforEC2Role"
        - "arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore"
        - "arn:aws:iam::aws:policy/AmazonKinesisFullAccess"
        - "arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess"
  EMREC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: !Sub ${DeploymentName}-EMREC2InstanceProfile
      Roles:
        - !Ref EMREC2Role
Outputs:
  StudioServiceRole:
    Description: 'EMR Studio Service Role ARN'
    Value: !GetAtt EMRStudioServiceRole.Arn
  StudioAdminRole:
    Description: 'EMR Studio User Role ARN'
    Value: !GetAtt EMRStudioAdmin.Arn
    Export:
      Name: EMRStudioAdminRole
  EMRServiceRole:
    Description: 'EMR Service Role ARN'
    Value: !GetAtt EMRServiceRole.Arn
    Export:
      Name: EMRServiceRole
  EMREC2Role:
    Description: 'EMR Service Role ARN'
    Value: !GetAtt EMREC2Role.Arn
    Export:
      Name: EMREC2Role
  EMREC2InstanceProfile:
    Description: 'EMR Service Role ARN'
    Value: !GetAtt EMREC2InstanceProfile.Arn
    Export:
      Name: EMREC2InstanceProfile