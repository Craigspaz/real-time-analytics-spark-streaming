# ######################################################################################################################
# EMR Studio Setup
# Version: 1.0
# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
# SPDX-License-Identifier: MIT-0
#
# Creates an EMR Studio environment with IAM authentication.
#
# Leverages nested stacks to deploy:
# - IAM Roles - emr-studio-iam-setup.yaml
# - Network configuration (VPC, Subnets, Security Groups) - emr-studio-network-setup.yaml
# - Cloudformation macro (lambda function) used by the cluster template - emr-studio-transform-lambda.yaml
########################################################################################################################
AWSTemplateFormatVersion: 2010-09-09
Parameters:
  IAMUserArn:
    Description: "ARN of user or role that can assume the EMR Studio Admin Role"
    Type: String
Resources:
  EMRKmsKey:
    Type: AWS::KMS::Key
    Properties:
      Description: "A sample symmetric encryption KMS key for encryption at rest"
      EnableKeyRotation: true
      PendingWindowInDays: 7
      KeyPolicy:
        Version: 2012-10-17
        Statement:
          - Sid: "Allow full access to account Administrators"
            Effect: Allow
            Principal:
              AWS: !Sub 'arn:aws:iam::${AWS::AccountId}:root'
            Action:
              - "kms:*"
            Resource: "*"
          - Sid: "Allow access to EMR Cluster EC2 Role"
            Effect: Allow
            Principal:
              AWS:
                Fn::GetAtt:
                  - EMRStudioUsers
                  - Outputs.EMREC2Role
            Action:
              - "kms:Encrypt"
              - "kms:Decrypt"
              - "kms:ReEncrypt*"
              - "kms:GenerateDataKey*"
              - "kms:DescribeKey"
            Resource: "*"
          - Sid: "Allow access to EMR Service Role"
            Effect: Allow
            Principal:
              AWS:
                Fn::GetAtt:
                  - EMRStudioUsers
                  - Outputs.EMRServiceRole
            Action:
              - "kms:Encrypt"
              - "kms:Decrypt"
              - "kms:ReEncrypt*"
              - "kms:GenerateDataKey*"
              - "kms:DescribeKey"
              - "kms:CreateGrant"
              - "kms:ListGrants"
            Resource: "*"
          - Sid: "Allow access to EMR Studio Role"
            Effect: Allow
            Principal:
              AWS:
                Fn::GetAtt:
                  - EMRStudioUsers
                  - Outputs.StudioServiceRole
            Action:
              - "kms:Encrypt"
              - "kms:Decrypt"
              - "kms:ReEncrypt*"
              - "kms:GenerateDataKey*"
              - "kms:DescribeKey"
            Resource: "*"
      Tags:
        - Key: Environment
          Value: !Sub ${AWS::StackName}
  EMRStudioS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${AWS::StackName}-${AWS::AccountId}
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: aws:kms
              KMSMasterKeyID: !Ref EMRKmsKey
      Tags:
        - Key: Environment
          Value: !Sub ${AWS::StackName}
  # Create IAM credentials in a nested stack
  EMRStudioUsers:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: https://s3.us-west-2.amazonaws.com/emrstudio.sample.templates/templates/emr-studio-iam-setup.yaml
      Parameters:
        DeploymentName: !Sub ${AWS::StackName}-iam
        S3BucketName: !Sub ${AWS::StackName}-${AWS::AccountId}
        UserArn: !Ref IAMUserArn
  # Create network configuration through a nested stack
  EMRStudioNetwork:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: https://s3.us-west-2.amazonaws.com/emrstudio.sample.templates/templates/emr-studio-network-setup.yaml
      Parameters:
        DeploymentName: !Sub ${AWS::StackName}-network
  # Deploy cloudformation macro for SC template
  EMRClusterTemplateMacro:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: https://s3.us-west-2.amazonaws.com/emrstudio.sample.templates/templates/emr-studio-transform-lambda.yaml
      Parameters:
        DeploymentName: !Sub ${AWS::StackName}-studio-macro
  EMRStudioEnv:
    Type: AWS::EMR::Studio
    DependsOn:
      - EMRStudioNetwork
      - EMRStudioUsers
    Properties:
      AuthMode: 'IAM'
      DefaultS3Location: !Sub s3://${EMRStudioS3Bucket}/notebooks
      Description: 'Sample emr studio environment'
      EngineSecurityGroupId:
        Fn::GetAtt:
          - EMRStudioNetwork
          - Outputs.StudioEngineSecurityGroup
      WorkspaceSecurityGroupId:
        Fn::GetAtt:
          - EMRStudioNetwork
          - Outputs.StudioWorkspaceSecurityGroup
      Name: !Sub ${AWS::StackName}-studio
      ServiceRole:
        Fn::GetAtt:
          - EMRStudioUsers
          - Outputs.StudioServiceRole
      # NOTE: These are private subnets.  For access to Git repos NAT gateways need to be provisioned.
      SubnetIds:
        - Fn::GetAtt:
            - EMRStudioNetwork
            - Outputs.StudioSubnet1
        - Fn::GetAtt:
            - EMRStudioNetwork
            - Outputs.StudioSubnet2
      VpcId:
        Fn::GetAtt:
          - EMRStudioNetwork
          - Outputs.StudioVPC
      Tags:
        - Key: Environment
          Value: !Sub ${AWS::StackName}-${AWS::AccountId}
Outputs:
  S3Bucket:
    Description: "Default EMR studio bucket for notebooks"
    Value: !Ref EMRStudioS3Bucket
  EMRStudioURL:
    Description: "The unique access URL of the Amazon EMR Studio"
    Value: !GetAtt EMRStudioEnv.Url
  EMRKmsKeyId:
    Description: 'EMR KMS Key for encryption at rest. Export for use in template.'
    Value: !Ref EMRKmsKey
    Export:
      Name: EMRKmsKeyId
