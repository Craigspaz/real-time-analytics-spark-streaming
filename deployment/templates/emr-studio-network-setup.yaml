# ######################################################################################################################
# EMR Studio Network configuration
# Version: 1.0
# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
# SPDX-License-Identifier: MIT-0
#
# Creates VPC and minimum network requirements to deploy EMR clusters and EMR Studio
# Consideration: Subnets and Security Groups are tagged with for-use-with-amazon-emr-managed-policies=true as the EMR
# Studio service role uses tag based condition to create the required network interfaces.
########################################################################################################################
AWSTemplateFormatVersion: 2010-09-09
Parameters:
  DeploymentName:
    Description: "A unique name for your deployment, will be use for naming convention. Only lower case."
    Type: String
    Default: emrstudio-network
#Using mappings to store config values that can change over time but abstracted from cluster creators.
Mappings:
  CIDRMap:
    VPC:
      CIDR: '10.192.0.0/16'
    Public:
      CIDR1: '10.192.10.0/24'
      CIDR2: '10.192.11.0/24'
    Private:
      CIDR1: '10.192.20.0/24'
      CIDR2: '10.192.21.0/24'
Resources:
  #Networking: VPC, Subnets, Private Route Tables, Security Groups
  EMRVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !FindInMap [CIDRMap, VPC, CIDR]
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Ref DeploymentName
  EMRInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Ref DeploymentName
  EMRInternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref EMRInternetGateway
      VpcId: !Ref EMRVPC
  EMRPublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref EMRVPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !FindInMap [CIDRMap, Public, CIDR1]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${DeploymentName} Public Subnet (AZ1)
        - Key: for-use-with-amazon-emr-managed-policies
          Value: true
  EMRPublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref EMRVPC
      AvailabilityZone: !Select [ 1, !GetAZs  '' ]
      CidrBlock: !FindInMap [CIDRMap, Public, CIDR2]
      MapPublicIpOnLaunch: true
      Tags:
          - Key: Name
            Value: !Sub ${DeploymentName} Public Subnet (AZ2)
          - Key: for-use-with-amazon-emr-managed-policies
            Value: true
  EMRPrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref EMRVPC
      AvailabilityZone: !Select [ 0, !GetAZs  '' ]
      CidrBlock: !FindInMap [CIDRMap, Private, CIDR1]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${DeploymentName} Private Subnet (AZ1)
        - Key: for-use-with-amazon-emr-managed-policies
          Value: true
  EMRPrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref EMRVPC
      AvailabilityZone: !Select [ 1, !GetAZs  '' ]
      CidrBlock: !FindInMap [CIDRMap, Private, CIDR2]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${DeploymentName} Private Subnet (AZ2)
        - Key: for-use-with-amazon-emr-managed-policies
          Value: true
  EMRNatGateway1EIP:
    Type: AWS::EC2::EIP
    DependsOn: EMRInternetGatewayAttachment
    Properties:
      Domain: vpc
  EMRNatGateway2EIP:
    Type: AWS::EC2::EIP
    DependsOn: EMRInternetGatewayAttachment
    Properties:
      Domain: vpc
  EMRNatGateway1:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt EMRNatGateway1EIP.AllocationId
      SubnetId: !Ref EMRPublicSubnet1
  EMRNatGateway2:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt EMRNatGateway2EIP.AllocationId
      SubnetId: !Ref EMRPublicSubnet2
  EMRPublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref EMRVPC
      Tags:
        - Key: Name
          Value: !Sub ${DeploymentName} Public Routes
  EMRPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: EMRInternetGatewayAttachment
    Properties:
      RouteTableId: !Ref EMRPublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref EMRInternetGateway
  EMRPublic1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref EMRPublicRouteTable
      SubnetId: !Ref EMRPublicSubnet1
  EMRPublic2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref EMRPublicRouteTable
      SubnetId: !Ref EMRPublicSubnet2
  EMRPrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref EMRVPC
      Tags:
        - Key: Name
          Value: !Sub ${DeploymentName} Private Routes (AZ1)
  EMRPrivateRoute1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref EMRPrivateRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref EMRNatGateway1
  EMRPrivate1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
        RouteTableId: !Ref EMRPrivateRouteTable1
        SubnetId: !Ref EMRPrivateSubnet1
  EMRPrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref EMRVPC
      Tags:
        - Key: Name
          Value: !Sub ${DeploymentName} Private Routes (AZ2)
  EMRPrivateRoute2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref EMRPrivateRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref EMRNatGateway2
  EMRPrivate2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref EMRPrivateRouteTable2
      SubnetId: !Ref EMRPrivateSubnet2
  # Security groups for EMR Cluster
  EMRClusterSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Cluster security group with no ingress rule"
      VpcId: !Ref EMRVPC
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: for-use-with-amazon-emr-managed-policies
          Value: true
  EMRServiceAccessSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Service access security group"
      VpcId: !Ref EMRVPC
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 8443
          ToPort: 8443
          DestinationSecurityGroupId: !Ref EMRClusterSecurityGroup
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 9443
          ToPort: 9443
          SourceSecurityGroupId: !Ref EMRClusterSecurityGroup
      Tags:
        - Key: for-use-with-amazon-emr-managed-policies
          Value: true
  # Security Groups for EMR Studio
  EMRWorkspaceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Security group for EMR Studio Workspaces and Notebooks."
      VpcId: !Ref EMRVPC
      # To access git repos
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: for-use-with-amazon-emr-managed-policies
          Value: true
  EMRStudioEngineSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Security group for EMR Studio Engine"
      VpcId: !Ref EMRVPC
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: for-use-with-amazon-emr-managed-policies
          Value: true
  # Egress and Ingress to avoid circular reference
  EMRWorkspaceSGEgress:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !GetAtt EMRWorkspaceSecurityGroup.GroupId
      IpProtocol: tcp
      FromPort: 18888
      ToPort: 18888
      DestinationSecurityGroupId: !Ref EMRStudioEngineSecurityGroup
  EMRStudioEngineSGIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !GetAtt EMRStudioEngineSecurityGroup.GroupId
      IpProtocol: tcp
      FromPort: 18888
      ToPort: 18888
      SourceSecurityGroupId: !Ref EMRWorkspaceSecurityGroup
  EndpointS3:
    Type: AWS::EC2::VPCEndpoint
    Properties:
        RouteTableIds:
           - !Ref EMRPrivateRouteTable1
           - !Ref EMRPrivateRouteTable2
        ServiceName: !Sub 'com.amazonaws.${AWS::Region}.s3'
        VpcId: !Ref EMRVPC
  EndpointDynamoDb:
    Type: AWS::EC2::VPCEndpoint
    Properties:
        RouteTableIds:
            - !Ref EMRPrivateRouteTable1
            - !Ref EMRPrivateRouteTable2
        ServiceName: !Sub 'com.amazonaws.${AWS::Region}.dynamodb'
        VpcId: !Ref EMRVPC
  EndpointKinesis:
    Type: AWS::EC2::VPCEndpoint
    Properties:
        VpcEndpointType: Interface
        SubnetIds:
            - !Ref EMRPrivateSubnet1
            - !Ref EMRPrivateSubnet2
        SecurityGroupIds:
            - !Ref EMRClusterSecurityGroup
        ServiceName: !Sub 'com.amazonaws.${AWS::Region}.kinesis-streams'
        VpcId: !Ref EMRVPC
Outputs:
  StudioEngineSecurityGroup:
    Description: 'EMR Studio engine security group ID'
    Value: !Ref EMRStudioEngineSecurityGroup
  StudioWorkspaceSecurityGroup:
    Description: 'EMR Studio workspace security group ID'
    Value: !Ref EMRWorkspaceSecurityGroup
  ClusterSecurityGroup:
    Description: 'EMR cluster security security group ID'
    Value: !Ref EMRClusterSecurityGroup
    Export:
      Name: EMRClusterSecurityGroup
  EMRServiceAccessSecurityGroup:
    Description: 'EMR service access security group ID'
    Value: !Ref EMRServiceAccessSecurityGroup
    Export:
      Name: EMRServiceAccountSecurityGroup
  StudioSubnet1:
    Description: 'EMR Studio subnet 1'
    Value: !Ref EMRPrivateSubnet1
    Export:
      Name: EMRPrivateSubnet
  StudioSubnet2:
    Description: 'EMR Studio subnet 2'
    Value: !Ref EMRPrivateSubnet2
    Export:
      Name: EMRPrivateSubnet2
  StudioVPC:
    Description: 'VPC Id'
    Value: !Ref EMRVPC