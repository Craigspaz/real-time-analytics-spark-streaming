# ######################################################################################################################
# EMR Cluster Template 1 for Service Catalog
# Version: 1.0
# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
# SPDX-License-Identifier: MIT-0
#
# Use as reference and validate the target output produced by the transform produces the desired number of nodes. Read
# all notes below before deploying.
#
# EMR Cluster Template leveraging  predefined VPC and subnets from EMR Studio
# - Mappings to resolve instance fleet instance types
# - Condition to use instance fleet with only spot or with only on-demand instances
# - Transform to resolve target capacity.
# - Assumes VPC, Private Subnet (EMRPrivateSubnet) and security group (EMRClusterSecurityGroup) exist and values are
#   available to import by cloudformation !import function.
# ######################################################################################################################
AWSTemplateFormatVersion: 2010-09-09
Parameters:
  ClusterName:
    Type: "String"
    Default: "Example_EMR_Cluster"
  MemoryProfile:
    Description: "What is the memory profile you expect in your workload. Small(m7g instances), medium (r7g instances), 
    large (r7g instances)."
    Type: "String"
    Default: "small"
    AllowedValues: ['small', 'medium', 'large']
  Optimization:
    Description: "Do you want to optimize for cost or reliability? Use reliability if you need predictable SLAs, 
    Use cost to optimize cost with spot instances."
    Type: "String"
    Default: "cost"
    AllowedValues: [ 'cost', 'reliability' ]
  UserConcurrency:
    Description: "How many users you expect to run jobs simultaneously. Determines the cluster node count by 
    determining the number of total executors (10 per user)."
    Type: "Number"
    Default: "2"
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "Engine ID"
        Parameters:
          - ClusterName
      - Label:
          default: "Analytics Engine Sizing"
        Parameters:
          - UserConcurrency
          - MemoryProfile
          - Optimization
    ParameterLabels:
      MemoryProfile:
        default: "Memory Profile"
Mappings:
  EMRRelease:
    current:
      EMR6: "emr-6.15.0"
      EMR5: "emr-5.36.1"
  # Choose instance type based on three profiles: small, medium, large.
  # The more instance types options you provide in your task fleet, the more likely it is for the deployment
  # to find availability of spot instance pricing for optimizing cost.
  InstanceTypes:
    small:
      master: "m7g.xlarge"
      core: "m7g.xlarge"
      taskfleet:
        - InstanceType: m7g.2xlarge
          WeightedCapacity: 1
        - InstanceType: m7g.4xlarge
          WeightedCapacity: 2
        - InstanceType: m7g.8xlarge
          WeightedCapacity: 3
    medium:
      master: "m7g.xlarge"
      core: "r7g.2xlarge"
      taskfleet:
        - InstanceType: r7g.2xlarge
          WeightedCapacity: 1
        - InstanceType: r7g.4xlarge
          WeightedCapacity: 2
        - InstanceType: r7g.8xlarge
          WeightedCapacity: 3
    large:
      master: "m7g.xlarge"
      core: "r7g.4xlarge"
      taskfleet:
        - InstanceType: r7g.4xlarge
          WeightedCapacity: 1
        - InstanceType: r7g.8xlarge
          WeightedCapacity: 2
        - InstanceType: r7g.16xlarge
          WeightedCapacity: 3
Conditions:
  UseSpot: !Equals
    - !Ref Optimization
    - cost
  UseOnDemand:
    !Equals
    - !Ref Optimization
    - reliability
Resources:
  EMRSecurityConfiguration:
    Type: AWS::EMR::SecurityConfiguration
    Properties:
      # KMS Key Ids are imported from a Cloudformation stack exported value.
      # To enable In-Transit configuration use the following syntax
      # "InTransitEncryptionConfiguration":{
      #  "TLSCertificateConfiguration": {
      #     "CertificateProviderType": "PEM",
      #     "S3Object": "arn:aws:s3:::<your cert location in S3>.zip"
      #  }}
      SecurityConfiguration: !Sub
        - '{ "EncryptionConfiguration": {
                "EnableInTransitEncryption": false,
                "EnableAtRestEncryption": true,
                "AtRestEncryptionConfiguration": {
                    "S3EncryptionConfiguration": {
                        "EncryptionMode": "SSE-KMS",
                        "AwsKmsKey": "arn:aws:kms:${AWS::Region}:${AWS::AccountId}:key/${ExpEmrKms}"
                    },
                    "LocalDiskEncryptionConfiguration": {
                        "EncryptionKeyProviderType": "AwsKms",
                        "AwsKmsKey": "arn:aws:kms:${AWS::Region}:${AWS::AccountId}:key/${ExpEmrKms}"
                    }
                }
          }}'
        - { ExpEmrKms: !ImportValue EMRKmsKeyId }
  #EMR Cluster
  EMRCluster:
    Type: AWS::EMR::Cluster
    Properties:
      Name: !Ref ClusterName
      Applications:
        - Name: Spark
        - Name: Livy
        - Name: JupyterEnterpriseGateway
        - Name: Hive
        - Name: Presto
      JobFlowRole: !ImportValue EMREC2InstanceProfile
      ServiceRole: !ImportValue EMRServiceRole
      ReleaseLabel: !FindInMap [EMRRelease, 'current', 'EMR6']
      VisibleToAllUsers: true
      LogUri:
        Fn::Sub: 's3://aws-logs-${AWS::AccountId}-${AWS::Region}/elasticmapreduce/'
      # Idle time out to auto-terminate cluster if not in use for 24 hours.
      AutoTerminationPolicy:
        IdleTimeout: 86400
      Configurations:
        - Classification: spark-hive-site
          ConfigurationProperties:
            hive.metastore.client.factory.class: com.amazonaws.glue.catalog.metastore.AWSGlueDataCatalogHiveClientFactory
        - Classification: iceberg-defaults
          ConfigurationProperties:
            iceberg.enabled: true
      SecurityConfiguration: !Ref EMRSecurityConfiguration
      Instances:
        TerminationProtected: false
        # Next 5 parameters import values from CloudFormation exports. Assumes the network is already deployed using
        # an AWS cloudformation stack with exported values. The pem key name is also retrieved from an exported value.
        # These values can also be parameterized in the template, however it would require to expose complexity to
        # data engineering or data science teams and will increase dependencies with cloud operations teams.
        Ec2KeyName: !ImportValue EMRDefaultSSHKey
        Ec2SubnetIds:
          - !ImportValue EMRPrivateSubnet
          - !ImportValue EMRPrivateSubnet2
        # EMR Cluster security group
        EmrManagedMasterSecurityGroup: !ImportValue EMRClusterSecurityGroup
        EmrManagedSlaveSecurityGroup: !ImportValue EMRClusterSecurityGroup
        # EMR Workspace security group
        ServiceAccessSecurityGroup: !ImportValue EMRServiceAccountSecurityGroup
        MasterInstanceFleet:
          Name: cfnMaster
          TargetOnDemandCapacity: 1
          TargetSpotCapacity: 0
          InstanceTypeConfigs:
            - InstanceType: !FindInMap [InstanceTypes, !Ref MemoryProfile, master]
              WeightedCapacity: 1
        CoreInstanceFleet:
          Name: cfnCore
          TargetOnDemandCapacity: 1
          TargetSpotCapacity: 0
          InstanceTypeConfigs:
            - InstanceType: !FindInMap [InstanceTypes, !Ref MemoryProfile, core]
              WeightedCapacity: 1
      Tags:
        - Key: "Environment"
          Value: !Ref ClusterName
          #This tag is required as it is defined in the EMR manage policy that Amazon Service Catalog uses to Launch cluster.
        - Key: "for-use-with-amazon-emr-managed-policies"
          Value: True
  EMRClusterTaskSpot:
    'Fn::Transform':
      Name: emr-capacity-macro
      Parameters:
        # Configure based on node configuration and executors per node.
        Target: TargetSpotCapacity
        ExecPerUser: 10
        ExecPerNode: '{"small": 3, "medium": 7, "large": 7}'
    Type: AWS::EMR::InstanceFleetConfig
    Condition: UseSpot
    Properties:
      ClusterId: !Ref EMRCluster
      Name: cfnTask
      InstanceFleetType: TASK
      TargetOnDemandCapacity: 0
      TargetSpotCapacity: "custom::Target"
      LaunchSpecifications:
        OnDemandSpecification:
          AllocationStrategy: lowest-price
        SpotSpecification:
          AllocationStrategy: capacity-optimized
          TimeoutAction: SWITCH_TO_ON_DEMAND
          TimeoutDurationMinutes: 5
      InstanceTypeConfigs: !FindInMap [ InstanceTypes,!Ref MemoryProfile, taskfleet]
  EMRClusterTaskOnDemand:
    'Fn::Transform':
      Name: emr-capacity-macro
      Parameters:
        Target: TargetOnDemandCapacity
        ExecPerUser: 10
        ExecPerNode: '{"small": 3, "medium": 7, "large": 7}'
    Type: AWS::EMR::InstanceFleetConfig
    Condition: UseOnDemand
    Properties:
      ClusterId: !Ref EMRCluster
      Name: cfnTask
      InstanceFleetType: TASK
      TargetOnDemandCapacity: "custom::Target"
      TargetSpotCapacity: 0
      LaunchSpecifications:
        OnDemandSpecification:
          AllocationStrategy: lowest-price
      InstanceTypeConfigs: !FindInMap [ InstanceTypes, !Ref MemoryProfile, taskfleet ]
  # Step added to address permissions required for notebook livy to run Spark Structure Streaming
  EMRClusterStep:
    Type: AWS::EMR::Step
    Properties:
      Name: "Update Livy Permissions on HDFS"
      ActionOnFailure: CONTINUE
      JobFlowId: !Ref EMRCluster
      HadoopJarStep:
        Jar: command-runner.jar
        Args:
          - "bash"
          - "-c"
          - "sudo usermod -a -G hdfsadmingroup livy"
Outputs:
  ClusterId:
    Value: !Ref EMRCluster
    Description: The ID of the EMR Cluster
  MasterNodeHadoopURL:
    Description: EMR Resource Manager",
    Value:
      Fn::Sub: 'http://${EMRCluster.MasterPublicDNS}:8088'